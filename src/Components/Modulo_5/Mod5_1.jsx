const Mod5_1 = ({ Cuadro, Red, Grey, Esp, Com }) => {
  return (
    <section id="5.1">
      <h3>5.1. Introducci√≥n a las tablas</h3>
      <p>
        Las tablas en COBOL son estructuras de datos similares a los arreglos en
        otros lenguajes. Permiten almacenar m√∫ltiples valores del mismo tipo
        bajo una misma estructura, accediendo a ellos mediante un √≠ndice. Se
        utilizan principalmente cuando: Se necesita almacenar listas o
        colecciones de datos. Se desea realizar b√∫squedas o recorridos
        secuenciales. Se trabaja con estructuras repetitivas (como registros
        mensuales, productos, empleados, etc.). No puede especificarse en una
        descripci√≥n de nivel 01, 77, 88 o 66. Entero indica el n√∫mero de veces
        que se repite un campo con la misma descripci√≥n. Se definen solamente en
        los niveles 02 a 49 ambos inclusive Decide qu√© tipo de datos contendr√°
        cada elemento de la tabla y define la estructura correspondiente
        utilizando la cl√°usula 01 LEVEL. Por ejemplo, si deseas crear una tabla
        de nombres, cada elemento podr√≠a ser una cadena de caracteres.
      </p>
      <h4>Uso de OCCURS</h4>
      <p>
      Esta cl√°usula es para definir tablas de 'n' dimensiones, y pueden ser referenciadas por √≠ndices o suscriptores. Esta cl√°usula no se puede usar en los niveles 01/66/77/88. Se utiliza para declarar arreglos de variables. Permite especificar el n√∫mero de elementos y la estructura de cada elemento dentro del arreglo. Indica el n√∫mero de veces 'n' que se repite un elemento (campo simple o compuesto) con la misma descripci√≥n. El sub√≠ndice correspondiente al primer elemento es 1. El sub√≠ndice puede ser un n√∫mero entero o un nombre de datos. Si es un nombre de datos se recomienda declararlo con formato binario (COMP). La cl√°usula OCCURS no puede especificarse en una descripci√≥n con n√∫mero de nivel 01 o 77. Una tabla en COBOL puede tener hasta 3 sub√≠ndices. En este caso se dice que la tabla es de 3 dimensiones. La cl√°usula OCCURS y VALUE son incompatibles, lo cual no permite inicializar una tabla en su propia declaraci√≥n. Por ejemplo, para declarar una tabla de
        nombres con capacidad para 100 elementos, puedes hacer lo siguiente:
      </p>
      <div className="codigo">
        01 TABLA-NOMBRES. <br />
        <Esp />
        05 NOMBRE-REGISTRO <Red>OCCURS</Red> 100 <Red>TIMES</Red>. <br />
        <Esp />
        <Esp />
        10 NOMBRE <Red>PIC</Red> X(30). <br />
        <Esp />
        <Esp />
        10 APELLIDO <Red>PIC</Red> X(30). <br />
      </div>






      <h4>Uso de DEPENDING ON</h4>
      <p>La cl√°usula DEPENDING ON permite que el n√∫mero de ocurrencias de una tabla se determine din√°micamente en tiempo de ejecuci√≥n.</p>
      <div className="twoColums">
        <div className="codigo">
01 TOTAL-EMPLEADOS        <Red>PIC</Red> 9(2).   <br />
01 TABLA-EMPLEADOS.   <br />
<Esp/>05 EMPLEADO-NOMBRE     <Red>PIC</Red> X(30)   <br />
<Esp/><Esp/><Red>OCCURS</Red> 1 <Red>TO</Red> 50 <Red>TIMES</Red>   <br />
<Esp/><Esp/><Red>DEPENDING ON</Red> TOTAL-EMPLEADOS.   <br />

        </div>
        <p> El n√∫mero real de elementos depender√° del valor de TOTAL-EMPLEADOS.</p>
      </div>



      <h4>5.3 INDEXED BY y USAGE INDEX</h4>
      <p>Cuando se necesita recorrer tablas de forma m√°s eficiente, se puede utilizar un √≠ndice, declarado con INDEXED BY.</p>
      <div className="codigo">
01 TABLA-EMPLEADOS.  <br />
<Esp/>05 EMPLEADO-NOMBRE      <Red>PIC</Red> X(30) <Red>OCCURS</Red> 10 <Red>TIMES</Red>  <br />
<br />
<Esp/><Red>INDEXED BY</Red> IDX-NOMBRE.  <br />

      </div>
<div className="twoColums">
    <p>Para manipular el √≠ndice se utiliza la instrucci√≥n SET:</p>
  <div>
  <div className="codigo">
<Red>SET</Red> IDX-NOMBRE <Red>TO</Red> 1. <br />
<Red>SET</Red> IDX-NOMBRE <Red>UP BY</Red> 1.

  </div>
  </div>
</div>

<div className="twoColums">
  <p>En la <mark>LINKAGE SECTION</mark>, cuando se trabaja con √≠ndices, se puede usar USAGE IS INDEX:</p>
  <div className="codigo">01 IDX-NOMBRE <Red>USAGE IS INDEX</Red>.</div>
</div>






<h4>5.4 Inicializaci√≥n y recorrido</h4>
<p>Las tablas pueden inicializarse con INITIALIZE o manualmente con MOVE.</p>
<div className="twoColums">
  <p>üìå Inicializar toda la tabla:</p>
  <div className="codigo"><Red>INITIALIZE</Red> EMPLEADO-NOMBRE.</div>
</div>

<div className="twoColums">
  <p>üìå Recorrido secuencial con sub√≠ndice:</p>
  <div className="codigo">
    <Red>PERFORM VARYING</Red> IDX <Red>FROM</Red> 1 <Red>BY</Red> 1 <Red>UNTIL</Red> IDX {">"} 10  <br />
   <Esp/>    <Red>DISPLAY</Red> EMPLEADO-NOMBRE(IDX)  <br />
    <Red>END-PERFORM</Red>.  <br />
  </div>
</div>
<div className="twoColums">
  <p>üìå Recorrido con √≠ndice:</p>
  <div className="codigo">
    <Red>SET</Red> IDX-NOMBRE <Red>TO</Red> 1  <br />
    <Red>PERFORM UNTIL </Red>IDX-NOMBRE {">"} 10  <br />
    <Esp/> <Red>DISPLAY</Red> EMPLEADO-NOMBRE(IDX-NOMBRE)  <br />
    <Esp/> <Red>SET</Red> IDX-NOMBRE <Red>UP BY</Red> 1  <br />
    <Red>END-PERFORM</Red>.  <br />
  </div>
</div>


<h4>5.5 B√∫squeda con SEARCH y SEARCH ALL</h4>
COBOL provee dos formas de b√∫squeda en tablas:
<li><mark>SEARCH</mark>: b√∫squeda secuencial.</li>
<li><mark>SEARCH ALL</mark>: b√∫squeda binaria (requiere que la tabla est√© ordenada).</li>

<div className="twoColums">
  <p>üìå Ejemplo de <mark>SEARCH</mark>:</p>
  <div className="codigo">
    <Red>SEARCH</Red> EMPLEADO-ID  <br />
    <Esp/>   <Red>AT END DISPLAY</Red> <Grey>'NO ENCONTRADO'</Grey>  <br />
    <Esp/>   <Red>WHEN</Red> EMPLEADO-ID(IDX) = 123  <br />
    <Esp/><Esp/>      <Red>DISPLAY</Red> <Grey>'ENCONTRADO'</Grey>  <br />
    <Red>END-SEARCH</Red>.  <br />
  </div>
</div>

<div className="twoColums">
  <div>
  <p>üìå Ejemplo de <mark>SEARCH ALL</mark>:</p>
    <p>
      Importante: SEARCH ALL requiere: <br />
        Tabla ordenada (ASCENDING KEY). <br />
        Uso de √≠ndice, no sub√≠ndice. <br />
        Declaraci√≥n del campo como OCCURS ... INDEXED BY. <br />
    </p>
      </div>
  <div className="codigo">
    <Red>SEARCH ALL</Red> EMPLEADO-ID  <br />
    <Esp/>   <Red>AT END DISPLAY</Red> <Grey>'NO ENCONTRADO'</Grey>  <br />
    <Esp/>   <Red>WHEN</Red> EMPLEADO-ID(IDX) = 123  <br />
    <Esp/><Esp/>      <Red>DISPLAY</Red> <Grey>'ENCONTRADO'</Grey> <br />
    <Red>END-SEARCH</Red>.  <br />
  </div>
</div>



<h5>MANIPULACI√ìN DE TABLAS</h5>
      <p>
        Una tabla es un conjunto de elementos del mismo tipo, que comparten en
        com√∫n un nombre com√∫n pero que son distinguibles por la posici√≥n que
        ocupa cada uno de ellos en la tabla. Cada elemento de la tabla puede
        contener un dato num√©rico o una cadena de caracteres o una combinaci√≥n
        de ambos. La representaci√≥n de una tabla se hace mediante variables
        suscritas o de sub√≠ndices y puede tener una o varias dimensiones. La
        descripci√≥n de una tabla se hace en la secci√≥n FILE y en la secci√≥n
        WORKINGÓÇàSTORAGE utilizando la cl√°usula OCCURS.
      </p>


      <div className="codigo">
          <Red>IDENTIFICATION DIVISION</Red>. <br />
          <Red>PROGRAM-ID</Red>. <Red>EJEMPLO-TABLA</Red>. <br /> <br />
          <Red>DATA DIVISION</Red>. <br />
          <Red>WORKING-STORAGE SECTION</Red>. <br />
          01 NOMBRE-REGISTRO. <br />
          <Esp />
          05 NOMBRE <Red>PIC</Red> X(30). <br />
          <Esp />
          05 APELLIDO <Red>PIC</Red> X(30). <br /> <br />
          01 TABLA-NOMBRES. <br />
          <Esp />
          05 NOMBRE-REGISTRO <Red>OCCURS</Red> 100 <Red>TIMES</Red>. <br />
          <Esp />
          <Esp />
          10 NOMBRE <Red>PIC</Red> X(30). <br />
          <Esp />
          <Esp />
          10 APELLIDO <Red>PIC</Red> X(30). <br /> <br />
          <Red>PROCEDURE DIVISION</Red>. <br />
          <Esp />
          <Red>PERFORM</Red> VACIAR-TABLA <br />
          <Esp />
          <Red>PERFORM</Red> LLENAR-TABLA <br />
          <Esp />
          <Red>PERFORM</Red> MOSTRAR-TABLA <br />
          <Esp />
          <Red>STOP RUN</Red>. <br /> <br />
          VACIAR-TABLA. <br />
          <Esp />
          <Red>INITIALIZE</Red> TABLA-NOMBRES. <br /> <br />
          LLENAR-TABLA. <br />
          <Esp />
          <Red>MOVE</Red> <Grey>'Juan'</Grey> <Red>TO</Red> NOMBRE-REGISTRO(1).
          // Asigna 'Juan' al primer elemento <br />
          <Esp />
          <Red>MOVE</Red> <Grey>'Perez'</Grey> <Red>TO</Red> APELLIDO(1). //
          Asigna 'Perez' al primer elemento <br />
          <Esp />
          <Red>MOVE</Red> <Grey>'Maria'</Grey> <Red>TO</Red> NOMBRE-REGISTRO(2).
          // Asigna 'Maria' al segundo elemento <br />
          <Esp />
          <Red>MOVE</Red> <Grey>'Gomez'</Grey> <Red>TO</Red> APELLIDO(2). //
          Asigna 'Gomez' al segundo elemento <br />
          ... // Continuar llenando la tabla <br /> <br />
          MOSTRAR-TABLA. <br />
          <Esp />
          <Red>DISPLAY</Red> <Grey>'Tabla de nombres:'</Grey> <br />
          <Esp />
          <Red>PERFORM</Red> <Red>VARYING</Red> I <Red>FROM</Red> 1{" "}
          <Red>BY</Red> 1 <Red>UNTIL</Red> I {"> "}100 <br />
          <Esp />
          <Esp />
          <Red>DISPLAY</Red> <Grey>'Nombre: '</Grey> NOMBRE-REGISTRO(I) <br />
          <Esp />
          <Esp />
          <Red>DISPLAY</Red> <Grey>'Apellido: '</Grey> APELLIDO(I) <br />
          <Esp />
          <Red>END-PERFORM</Red>. <br />
          <br />
        </div>



          <h5>Acceder y manipular la tabla:</h5>
        <p>
            Una vez que hayas definido la tabla, puedes acceder y manipular sus
            elementos de la misma manera que lo har√≠as con cualquier otra variable
            en COBOL. Puedes acceder a elementos espec√≠ficos de la tabla
            utilizando √≠ndices y realizar operaciones con ellos seg√∫n sea
            necesario en tu programa.
        </p>
   

        <h5>Manipulaci√≥n de tablas en PROCEDURE DIVISION</h5>
      <p>
        Cuando se especifica nombre dato-2 debe ser descrito por medio de la
        cl√°usula USAGE IS INDEX o como un campo elemental entero. El valor de
        este campo evoluciona paralelamente al √≠ndice de la tabla y se emplea
        cuando:
      </p>
        <ul>
          <li>
            A: Aparte de realizar la b√∫squeda de un determinado elemento de la
            tabla se desea conocer su posici√≥n.
          </li>
          <li>
            B: Se desea incrementar simult√°neamente el √≠ndice de otra tabla
            diferente a la tabla en la que se est√° realizando la b√∫squeda. Las
            condiciones de las cl√°usulas WHEN se eval√∫an en el orden en que
            est√°n descritas.
          </li>
        </ul>


      <h4>Sentencia SET</h4>
      <p>
        Permite transferir el valor de un literal, nombre de datos o de un
        √≠ndice a uno o m√°s identificadores.
      </p>
      <ul>
        <li>
          Formato 1: Cuando se ejecuta esta sentencia el valor del operando que
          sigue a TO es transferido a los operandos que siguen a SET. SET I J TO
          1.
        </li>
        <li>
          Formato 2: Este formato permite ir incrementando (UP BY) o
          decrementando (DOWN BY) el √≠ndice o √≠ndices en el valor especificado
          por nombre dato o entero. SET I J UP BY 1.
        </li>
      </ul>



    </section>
  );
};

export { Mod5_1 };
