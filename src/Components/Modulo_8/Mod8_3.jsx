const Mod8_3 = ({ Cuadro, Red, Grey, Esp, Com }) => {
  return (
    <section id="8.3">
      <h3>8.3 QSAM, VSAM, ESDS, KSDS, RRDS</h3>
      <p>
        Estas son organizaciones f√≠sicas utilizadas en sistemas z/OS
        (mainframe):
      </p>
      <h4>QSAM (Queued Sequential Access Method)</h4>
      <p>
        M√©todo secuencial est√°ndar para archivos. Se usa para archivos de texto
        o binarios secuenciales. Es transparente al programador COBOL.
      </p>
      <h4>VSAM (Virtual Storage Access Method)</h4>
      <p>M√©todo avanzado para el manejo de archivos indexados o relativos.</p>
      <p>
        Definidos como Virtual Storage Access Method, es un tipo de fichero que
        trata de mejorar lo que se hace con los ficheros secuenciales y el cual
        soporta que se tenga un mayor n√∫mero de registros, y que estos de igual
        forma puedan ser procesados en un tiempo m√°s √≥ptimo y con un acceso m√°s
        eficaz. Estos archivos se caracterizan por tener una llave (clave) de
        acceso a cada uno de los registros lo cual permite que se tenga un mejor
        acceso a los archivos,
      </p>
      <h5>Cl√∫ster VSAM</h5>
      Los conjuntos de datos l√≥gicos para almacenar registros se conocen como
      cl√∫steres. Simplemente una asociaci√≥n del √≠ndice, un conjunto de
      secuencias, un conjunto de datos. El espacio ocupado por un cl√∫ster VSAM
      se divide en √°reas contiguas denominadas Intervalos de control (seg√∫n se
      explica m√°s abajo). Hay dos componentes principales en un cl√∫ster VSAM:{" "}
      <br />
      <li>
        <mark>Index</mark> contiene la parte del √≠ndice. Los registros de √≠ndice
        est√°n presentes en el componente de √≠ndice. El uso del componente de
        √≠ndice VSAM puede recuperar registros del componente de datos.
      </li>
      <li>
        <mark>Data</mark> contiene la parte de datos. Los registros de datos
        reales est√°n presentes en el componente de datos.
      </li>
      <br />
      Siempre se advertir√° sobre ambas zonas bien delimitadas que duplican el
      espacio de almacenamiento:
      <li>
        √°rea de datos: contiene los registros almacenados seg√∫n orden de ingreso
      </li>
      <li>
        √°rea de √≠ndice: contiene los mismos registros del √°rea anterior pero
        ordenados seg√∫n clave
      </li>
      de acceso.
      <h5>Intervalo de control</h5>
      Los intervalos de control (CI) en VSAM son equivalentes a bloques para
      conjuntos de datos que no son VSAM. En los m√©todos que no son VSAM, la
      unidad de datos la define el bloque. Este concepto es la cantidad de
      registros f√≠sicos que contiene un registro l√≥gico ante cada READ en c√≥digo
      COBOL. VSAM trabaja con el √°rea de datos l√≥gicos que se conoce como
      Intervalos de control. En este caso ante cada READ en c√≥digo COBOL, queda
      disponible un intervalo de control o √°rea de datos l√≥gicos. Los intervalos
      de control son la unidad m√°s peque√±a de transferencia entre un disco y el
      sistema operativo. Siempre que se recupera un registro directamente del
      almacenamiento, todo el CI que contiene el registro se lee en el b√∫fer de
      entrada y salida de VSAM. Luego, el registro deseado se transfiere al √°rea
      de trabajo desde el b√∫fer VSAM. El intervalo de control consta de: <br />
      <li>Registros l√≥gicos</li>
      <li>Campos de informaci√≥n de control</li>
      <li>Espacio libre</li>
      Cuando se carga un conjunto de datos VSAM, se crean intervalos de control.
      El tama√±o del intervalo de control predeterminado es de 4 KB y(1 p√°gina de
      memoria Mainframe) y puede extenderse hasta 32 KB.
      <br /> <br />
      <p>
        <u>Tipos de archivos VSAM</u>:
      </p>
      <h5>ESDS (Entry-Sequenced Data Set)</h5>
      Similar a archivos secuenciales, pero con capacidades extendidas. Se trata
      de un fichero VSAM, equivalente al cl√°sico Fichero Secuencial. no est√°
      indexado. Las claves no est√°n presentes en el conjunto de datos ESDS, por
      lo que pueden contener registros duplicados. ESDS se puede utilizar en
      programas COBOL como cualquier otro archivo. Dentro del JCL
      especificaremos el nombre del archivo y podemos utilizarlo para procesarlo
      dentro del programa. En el programa COBOL, se especifica: <br />
      <li>organizaci√≥n de archivo Sequential</li>
      <li>modo de acceso Sequential</li>
      <h5>KSDS (Key-Sequenced Data Set)</h5>
      Archivo indexado, permite acceso por clave y secuencial. Emplea dos
      subficheros para el tratamiento de los datos. Uno para el almacenamiento
      de los √≠ndices, y otro para la informaci√≥n (Registros de datos) asociada a
      cada √≠ndice. conjunto de datos secuenciados caracterizados por una clave.
      KSDS; es el m√°s √∫til y vers√°til de este tipo de almacenamiento. En el
      programa COBOL, se especifica: <br />
      <li>organizaci√≥n de archivo INDEXED</li>
      <li>modo de acceso SEQUENTIAL/RANDOM/DYNAMIC</li> <br />
      <u>El cl√∫ster de KSDS consta de dos componentes</u>: <br />
      <strong>INDICE</strong>: El componente de √≠ndice del cl√∫ster KSDS contiene
      la lista de valores clave para los registros en el cl√∫ster con punteros a
      los registros correspondientes en el componente de datos. El componente de
      √≠ndice se refiere a la direcci√≥n f√≠sica de un registro KSDS. Esto
      relaciona la clave de cada registro con la ubicaci√≥n relativa del registro
      en el conjunto de datos. Cuando se agrega o elimina un registro, este
      √≠ndice se actualiza en consecuencia. <br /> <br />
      <strong>DATA</strong>: El componente de datos del cl√∫ster KSDS contiene
      los datos reales. Cada registro en el componente de datos de un cl√∫ster
      KSDS contiene un campo clave con el mismo n√∫mero de caracteres y ocurre en
      la misma posici√≥n relativa en cada registro.
      <br />
      <br />
      <p>
        <u>Caracter√≠sticas de un archivo VSAM KSDS</u>:
      </p>
      <li>Los registros siempre se mantienen ordenados por campo clave.</li>
      <li>Los registros se almacenan en orden ascendente.</li>
      <li>Se puede acceder a los registros de forma secuencial o directa.</li>
      <li>Los registros se identifican mediante una clave.</li>
      <li>
        La clave de cada registro es un campo en una posici√≥n predefinida dentro
        del registro.
      </li>
      <li>Cada clave debe ser √∫nica en el conjunto de datos de KSDS.</li>
      <li>
        Cuando se insertan nuevos registros, el orden l√≥gico de los registros
        depende de la secuencia de clasificaci√≥n del campo clave.
      </li>
      <li>La longitud de los registros puede ser fija o variable.</li>
      <li>Se puede utilizar en c√≥digo COBOL como cualquier otro archivo.</li>
      <br />
      <p>
        <u>Estructura de un archivo VSAM KSDS</u>:
      </p>
      Para buscar un registro, se debe armar un valor de clave √∫nico. El valor
      clave se busca en el componente de √≠ndice. Una vez que se encuentra la
      clave, se recupera la direcci√≥n de memoria correspondiente que se refiere
      al componente de datos. A partir de la direcci√≥n de la memoria podemos
      obtener los datos reales que se almacenan en el componente de datos.
      <br />
      <h5>RRDS (Relative Record Data Set) </h5>
      Cada registro tiene una posici√≥n num√©rica fija (como RELATIVE). Se trata
      del VSAM m√°s eficiente. Se asigna un n√∫mero relativo a cada registro, que
      es el que se usar√° para recuperar la informaci√≥n. Obviamente, si dicha
      asignaci√≥n no se actualiza correctamente cada vez que borramos registros
      del fichero, entonces ir√°n quedando espacios de memoria sin uso y el
      acceso ser√° cada vez menos eficiente.
      <h5>Linear Data Set (LDS) </h5>
      <p>
        Este tipo de fichero se emplea para almacenar los TABLESPACE de las
        bases de datos DB2.
      </p>
      <br />
      <p>
        üìå COBOL accede a archivos VSAM mediante ORGANIZATION IS INDEXED y
        declarando claves.
      </p>
      <br />
      <p>
        Puede ser raro que veas un desarrollo hecho en archivos VSAM. Esto
        debido a que cuando se implement√≥ no se ten√≠an bien especificadas las
        reglas de las bases de datos relacionales dentro del DB2, pero ahora se
        ha vuelto una pr√°ctica m√°s usual que se utilicen las bases de datos
        relacionales con los archivos secuenciales. O que en casos muy
        especiales se utilicen desarrollos con archivos VSAM.
      </p>
      <br />
      <p>
        <u>ventajas/ desventajas que tienen estos archivos</u>:
      </p>
      <li>Estos archivos pueden ser de una longitud fija o variable</li>
      <li>
        Est√°n organizados en bloques de tama√±o fijo llamados intervalos de
        control (IC) y a su vez en divisiones m√°s grandes llamadas √Åreas de
        Control (AC)
      </li>
      <li>El tama√±o de los intervalos se miden en bytes</li>
      <li>
        Las √°reas de control se miden en n√∫mero de pistas o cilindros de disco.
      </li>
      <p>
        La manipulaci√≥n de ficheros VSAM (‚Äúborrar‚Äù y ‚Äúdefinir‚Äù) se realiza
        normalmente a trav√©s de la utilidad de IDCAMS. Los programas propios
        pueden acceder a ficheros VSAM mediante sentencias de ‚Äúdata definition‚Äù
        (DD) en los JCL o en las regiones online de CICS. DB2 est√° implementado
        sobre ficheros VSAM usando su estructura de datos.
      </p>
    </section>
  );
};

export { Mod8_3 };
