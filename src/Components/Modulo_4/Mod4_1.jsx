const Mod4_1 = ({ Cuadro, Red, Grey, Esp, Com }) => {
  return (
    <section id="4.1">
      <h3>4.1 Campos num√©ricos: PIC 9</h3>
     
      
      <p>
        En COBOL, se utilizan varios tipos de datos num√©ricos para representar
        valores num√©ricos, ya sean enteros o decimales. Estos tipos de datos
        num√©ricos son fundamentales para realizar c√°lculos matem√°ticos y
        manipular datos financieros en aplicaciones empresariales.{" "}
      </p>
      <h4>INTEGER (PIC 9):</h4>
      <p>
        El tipo de dato INTEGER se utiliza para representar n√∫meros enteros en
        COBOL. Estos n√∫meros no tienen parte decimal y pueden ser positivos o
        negativos. La declaraci√≥n de una variable INTEGER se realiza con la
        cl√°usula PIC seguida de una especificaci√≥n de tama√±o, que indica la
        cantidad de d√≠gitos que puede contener la variable. Se pueden hacer
        operaciones. M√°ximo desde 18 posiciones hasta 32 bytes (seg√∫n cada
        instalaci√≥n). La Inclusi√≥n de signo operacional (<strong>S</strong>) indica que el n√∫mero
        es con signo (Signed Number). Esto significa que la variable puede
        representar tanto valores positivos como negativos.
      </p>
      <ul>
        <li>Si no se usa "<strong>S</strong>", el n√∫mero es siempre positivo (00000 a 99999)</li>
        <li>
          Si se usa "<strong>S</strong>", el n√∫mero puede ser positivo o negativo (-99999 a
          99999).
        </li>
      </ul>
      <div className="twoColums">
        <div className="codigo">
          01 EdadCliente <Red>PIC</Red> 99. <br />
          01 CantidadProductos <Red>PIC</Red> S9(5).
        </div>
        <p>
          En el primer ejemplo, EdadCliente puede contener n√∫meros enteros
          positivos de hasta dos d√≠gitos. <br />
          En el segundo ejemplo, CantidadProductos puede contener n√∫meros
          enteros positivos o negativos de hasta cinco d√≠gitos.
        </p>
      </div>
     


















      <h3>4.5 Decimales: V</h3>
      <p>
        En COBOL, la letra V dentro de una cl√°usula PIC indica la posici√≥n del
        punto decimal impl√≠cito. Esto significa que el punto no se almacena en
        la memoria, pero COBOL lo interpreta en esa posici√≥n al realizar
        operaciones y conversiones.
      </p>
      Nota importante: La V es s√≥lo una marca l√≥gica, no ocupa espacio de
      almacenamiento.
      <div className="codigo">
        <Red>PIC</Red> 9(4)V99
      </div>
      <p>Este formato define un n√∫mero de 6 d√≠gitos, de los cuales:</p>
      <li>4 est√°n antes del punto decimal (parte entera),</li>
      <li>2 est√°n despu√©s del punto decimal (parte decimal).</li>
      üìå No hay un punto real almacenado. COBOL lo interpreta como si existiera
      entre el cuarto y el quinto d√≠gito.
      <div className="twoColums">
        <div className="codigo">
          01 PRECIO <Red>PIC</Red> 9(4)V99 <Red>VALUE</Red> 123456.
        </div>
        <div>
          COBOL interpreta este valor como: 1234.56 El punto no se almacena ni
          se muestra autom√°ticamente.
        </div>
      </div>


      <div className="twoColums">
        <div className="codigo">
          01 PrecioProducto <Red>PIC</Red> S9(5)V99. <br />
          01 SaldoCuentaBancaria <Red>PIC</Red> 9(7)V999.
        </div>

        <p>
          En el primer ejemplo, PrecioProducto puede contener un valor decimal
          con una parte entera de hasta cinco d√≠gitos y dos d√≠gitos decimales.
          En el segundo ejemplo, SaldoCuentaBancaria puede contener un valor
          decimal con una parte entera de hasta siete d√≠gitos y tres d√≠gitos
          decimales.
          <strong>
            La " V " indica la parte decimal. El signo " S " indica que la
            variable puede contener valores negativos.
          </strong>
        </p>
      </div>





      <h3>Campo num√©rico con signo (S)</h3>
      <p>
        En COBOL, el prefijo S en una cl√°usula PIC (Picture) indica que el campo
        num√©rico puede contener signo, es decir, puede representar tanto valores
        positivos como negativos.
      </p>
      <li>
        <mark>S</mark>: indica que el n√∫mero puede tener signo.
      </li>
      <li>
        <mark>9(n)</mark>: representa un n√∫mero con <mark>n</mark> d√≠gitos
        decimales enteros.
      </li>
      <p>
        El signo no ocupa un car√°cter adicional visible en la representaci√≥n,
        sino que se guarda internamente, dependiendo del uso especificado (por
        ejemplo, <mark>DISPLAY</mark>, <mark>COMP</mark>, <mark>COMP-3</mark>,
        etc.).
      </p>
      <div className="twoColums">
        <div className="codigo">PIC 9(4)V99</div>
        <div>
          Esto representa un n√∫mero con 4 d√≠gitos enteros y 2 decimales.
          Ejemplo: 123456 se interpreta como 1234.56.
        </div>
      </div>
      <div className="twoColums">
        <div className="codigo">
          01 PRECIO <Red>PIC</Red> 9(3)V99.{" "}
          <Com>Representa valores hasta 999.99</Com> <br />
          01 IMPORTE <Red>PIC</Red> S9(5)V999.{" "}
          <Com>Hasta 99999.999 con signo</Com>
        </div>
        <div className="dodigo">
          El <mark>V</mark> puede ser interpretado como una coma si se define en{" "}
          <mark>SPECIAL-NAMES</mark>:
          <div className="codigo">
            <Red>SPECIAL-NAMES</Red>. <br />
            <Red>DECIMAL-POINT IS COMMA</Red>. <br />
          </div>
        </div>
      </div>
      <h5>Ejemplo 1: N√∫mero entero con signo</h5>
      <div className="codigo">
        01 SALDO <Red>PIC</Red> S9(5) <Red>VALUE</Red> -12345.
      </div>
      <li>
        Puede contener valores entre <strong>-99999</strong> y{" "}
        <strong>+99999</strong>.
      </li>
      <li>
        El signo se almacena de forma interna, pero en algunos sistemas o usos
        puede visualizarse como un car√°cter especial (por ejemplo,{" "}
        <mark>{"{"}</mark> o <mark>{"}"}</mark> al final del n√∫mero).
      </li>
      <h5>Ejemplo 2: N√∫mero con decimales y signo</h5>
      <div className="codigo">
        01 PRECIO <Red>PIC</Red> S9(4)V99 <Red>VALUE</Red> -1234.56.
      </div>
      <li>
        Representa un n√∫mero con 4 enteros y 2 decimales, con posibilidad de
        signo.
      </li>
      <li>
        El car√°cter <mark>V</mark> es un punto decimal impl√≠cito, no se almacena
        f√≠sicamente.
      </li>
      <li>
        Si se omite la <mark>S</mark>, se asume que el n√∫mero no tendr√° signo
        (siendo positivo).
      </li>
      <li>
        El uso de <mark>S9</mark> es com√∫n cuando se trabaja con c√°lculos
        matem√°ticos, valores contables o campos que deben diferenciar entre
        cr√©ditos y d√©bitos.
      </li>
      <li>
        Para mostrar adecuadamente el signo en pantalla, es com√∫n combinar el{" "}
        <mark>S9</mark> con variables de edici√≥n (ver tema sobre variables de
        edici√≥n m√°s adelante).
      </li>


             
      <h4>SIGN</h4>
<p>
Esta cl√°usula especifica la posici√≥n y el modo de representaci√≥n del signo
operacional de un campo num√©rico en cuya especificaci√≥n de formato se ha
especificado 'S'. Permite especificar d√≥nde se debe colocar el signo (+ o -) en un campo num√©rico con signo. 
</p>
<ul>
  <li>
    Si la cl√°usula SEPARATE no se especifica, el signo del n√∫mero es
    incorporado en el d√≠gito de la derecha (TRAILING) o en el d√≠gito de la
    izquierda (LEADING). En este caso el car√°cter S de la PICTURE no se tiene
    en cuenta para determinar el tama√±o del campo.
  </li>
  <li>
    Si la cl√°usula SEPARATE se especifica, entonces el signo es almacenado
    como un car√°cter separado adicional a los d√≠gitos. En este caso el car√°cter
    'S' se tiene en cuenta para determinar el tama√±o del campo.
  </li>
  <li>
    Si la cl√°usula SIGN no se especifica, generalmente la posici√≥n por defecto
    es a la izquierda
  </li>
</ul>
<div className="codigo">
05 SALDO     <Red>PIC</Red> S9(5) <Red>SIGN IS LEADING</Red>.  <Esp/><Com>-1234</Com> <br />
05 MONTO     <Red>PIC</Red> S9(4) <Red>SIGN IS TRAILING</Red>. <Esp/><Com>5678-</Com>
</div>


<h4>Uso de USAGE (cl√°usulas de almacenamiento )</h4>
      <p>
        En COBOL, se pueden utilizar cl√°usulas USAGE para especificar c√≥mo se
        almacenan los valores num√©ricos en la memoria. Las cl√°usulas USAGE son
        opcionales y se utilizan para optimizar el uso de memoria. Algunas
        cl√°usulas USAGE comunes son:
      </p>
      <ul>
        <li>
          USAGE IS DISPLAY (predeterminado): Se utiliza para variables alfanum√©ricas. Los datos
          se almacenan como caracteres ASCII y se pueden mostrar en informes o
          pantallas.
        </li>
        <li>
          USAGE IS BINARY: Se utiliza para variables num√©ricas enteras. Los
          datos se almacenan en formato binario y se pueden utilizar para
          c√°lculos aritm√©ticos.
        </li>
        <li>
          USAGE IS COMP: Similar a USAGE IS BINARY, pero se utiliza para n√∫meros
          enteros. Los datos se almacenan de manera m√°s eficiente en formato
          binario.
        </li>
        <li>
          USAGE IS COMP-3 o USAGE IS PACKED-DECIMAL: Se utiliza para variables
          num√©ricas decimales empaquetadas. Los datos se almacenan en formato
          comprimido, ahorrando espacio de almacenamiento. Otros tipos menos
          comunes incluyen USAGE IS POINTER, USAGE IS INDEX, etc.
        </li>
      </ul>
      <div className="codigo">
        01 NUMERO-DIAS <Red>USAGE IS BINARY</Red>. <br />
        01 SALDO-CUENTA <Red>USAGE IS COMP</Red>. <br />
        01 NUMERO-CLIENTE <Red>USAGE IS DISPLAY</Red>. <br />
        01 MONTO-PAGAR <Red>USAGE IS COMP-3</Red>. <br />
      </div>
      <p>
        La elecci√≥n del tipo correcto de USAGE puede tener un impacto en el
        rendimiento y el uso de memoria de un programa COBOL. Es importante
        seleccionar el tipo adecuado de USAGE seg√∫n el tipo de datos que se est√°
        manejando y los requisitos de rendimiento del programa.
      </p>
     
      <div className="twoColums">
        <div className="codigo">
          01 TotalVentas <Red>PIC</Red> 9(9) <Red>USAGE IS</Red>{" "}
          COMPUTATIONAL-3.
        </div>
        <p>
          En este ejemplo, TotalVentas se almacena de manera eficiente para
          c√°lculos utilizando la cl√°usula COMPUTATIONAL-3.
        </p>
      </div>
      <div className="codigo">
        01 TOTAL-VENTAS <Red>PIC</Red> 9(6)V99 <Red>USAGE DISPLAY</Red>. <br />
        01 TOTAL-FACTURAS <Red>PIC</Red> S9(6)V99 <Red>USAGE COMP-3</Red>.{" "}
        <br />
      </div>

    
      


      <h5>Num√©rico empaquetado (PIC S9(n) COMP-3):</h5>
      <p>
        Se utiliza para almacenar n√∫meros de manera comprimida para ahorrar
        espacio de almacenamiento. Es especialmente √∫til para grandes vol√∫menes
        de datos num√©ricos.
      </p>
      <h5>BINARY o COMPUTATIONAL o COMPUTATIONAL-4</h5>
<li>El dato es almacenado en formato binario ( media palabra, palabra, etc).</li>
<li>Cuando tiene signo ( positivo o negativo ), se representa en dos medias palabras complementarias.</li>
<li>Del ejemplo de +1234 / -1234 ser√° 00 00 y 04 D2</li>
<li>Una media palabra ( 2 BYTES ) es usada para 4 d√≠gitos. Una palabra ( 4 BYTES ) es usada para 5 a 9 d√≠gitos.</li>
<li>Una doble palabra ( 8 BYTES ) es usada para 10 a 18 d√≠gitos.</li>

<h5>COMPUTATIONAL-3</h5>
<li>El dato es almacenado en un packed-decimal o sea dos d√≠gitos por byte.</li>
<h5>Estructura</h5>
<Cuadro data={{gridTemplateColumns:"1fr 1fr 1fr"}} key={51}>
<div className="col tCenter">
<div>PICTURE</div>
<div>9999</div>
<div>S9999</div>
<div>S9999</div>
<div>9999BINARY</div>
<div>999999BINARY</div>
<div>S9999BINARY</div>
<div>S999999BINARY</div>
<div>9999COMP-3</div>
<div>S9999COMP-3</div>
<div>S9999COMP-3</div>
</div>
<div className="col tCenter">
<div>VALOR</div>
<div>+1234 / -1234</div>
<div>+1234</div>
<div>-1234</div>
<div>+1234 / -1234</div>
<div>+1234 / -1234</div>
<div>+1234 / -1234</div>
<div>+1234 / -1234</div>
<div>+1234 / -1234</div>
<div>+1234</div>
<div>-1234</div>
</div>
<div className="col tCenter">
<div>REPRESENTACI√ìN INTERNA</div>
<div>F1F2F3F4</div>
<div>F1F2F3C4</div>
<div>F1F2F3D4</div>
<div>04 D2</div>
<div>00 00 04 D2</div>
<div>FB 2E</div>
<div>FFFFFB2E</div>
<div>01 23 4F</div>
<div>01 23 4C</div>
<div>01 23 4D</div>
  </div>
</Cuadro>


      <br />
      <h3>4.2 Campos alfab√©ticos: PIC A</h3>
      <p>
        En COBOL, la cl√°usula PIC A (Picture A) define un campo alfab√©tico, es
        decir, un campo que s√≥lo puede contener letras (de la A a la Z,
        may√∫sculas y min√∫sculas dependiendo del sistema, aunque tradicionalmente
        se usaban solo may√∫sculas en mainframes). üìå No se permiten d√≠gitos
        num√©ricos ni caracteres especiales.
      </p>
      <div className="twoColums">
        <div className="codigo">01 CAMPO-ALFA PIC A(10).</div>
        <div>
          Esto define un campo de 10 posiciones que puede contener solo letras.
        </div>
      </div>
      <p>
        <u>Caracter√≠sticas del tipo A</u>
      </p>
      <li>
        <strong>Tipo de dato</strong>: Alfab√©tico
      </li>
      <li>
        <strong>Rango de valores</strong>: Letras (A-Z, a-z en sistemas
        compatibles con ASCII/EBCDIC)
      </li>
      <li>
        <strong>Longitud m√°xima</strong>: Depende del sistema, usualmente hasta
        255 caracteres
      </li>
      <li>
        <strong>Inclusi√≥n de espacios</strong>: Se permiten espacios, pero no
        caracteres num√©ricos
      </li>
      <li>
        <strong>Incompatibilidad</strong>: No se pueden almacenar directamente
        n√∫meros o s√≠mbolos
      </li>
      <br />
      <p>
        En la pr√°ctica moderna, <mark>PIC X</mark> (alfanum√©rico) es mucho m√°s
        utilizado, ya que permite letras, n√∫meros y s√≠mbolos. Sin embargo,{" "}
        <mark>PIC A</mark> puede ser √∫til para validaciones estrictas o
        estructuras que deben contener exclusivamente texto alfab√©tico (por
        ejemplo, ciertas iniciales, c√≥digos de letras, etc.).
      </p>
      4.3 Campos alfanum√©ricos: PIC X ¬øQu√© es PIC X? La cl√°usula PIC X (Picture
      X) define un campo alfanum√©rico, es decir, un campo que puede contener
      letras, n√∫meros, s√≠mbolos y espacios. üìå Es el tipo de campo m√°s flexible
      en COBOL y, por lo tanto, uno de los m√°s utilizados.
      <div className="twoColums">
        <div className="codigo">
          01 NOMBRE-COMPLETO <Red>PIC</Red> X(30).
        </div>
        <div>
          Esto define un campo de 30 posiciones que puede almacenar cualquier
          combinaci√≥n de caracteres alfanum√©ricos.
        </div>
      </div>
      <p>
        <u>Caracter√≠sticas del tipo X</u>:
      </p>
      <li>
        <strong>Tipo de dato</strong>: Alfanum√©rico
      </li>
      <li>
        <strong>Rango de valores</strong>: Letras (A-Z, a-z), n√∫meros (0-9),
        s√≠mbolos (como +, -, /, *) y espacios
      </li>
      <li>
        <strong>Longitud m√°xima</strong>: Depende del sistema, com√∫nmente hasta
        255 caracteres
      </li>
      <li>
        <strong>Usos comunes</strong>: Nombres, direcciones, mensajes, c√≥digos
        mixtos, descripciones, etc.
      </li>
      <li>
        <strong>Alineaci√≥n</strong>: Los valores se alinean a la izquierda y se
        rellenan con espacios a la derecha
      </li>
      <li>Acepta cualquier car√°cter ASCII o EBCDIC v√°lido.</li>
      <li>
        No realiza validaci√≥n del tipo de contenido (a diferencia de PIC A o PIC
        9).
      </li>
      <li>
        Muy √∫til para manejar datos de entrada de usuario, archivos de texto,
        impresiones en pantalla, etc.
      </li>
      <li>Es ideal para casi cualquier tipo de dato textual o mixto.</li>
      <li>
        Es com√∫n limpiar espacios con funciones intr√≠nsecas como FUNCTION TRIM.
      </li>
      <li>
        Verificar si el contenido tiene solo letras o n√∫meros si se requiere una
        validaci√≥n adicional.
      </li>
    </section>
  );
};

export { Mod4_1 };
